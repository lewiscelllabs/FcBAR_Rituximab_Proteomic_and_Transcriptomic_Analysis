---
title: "Rituximab_RNASeq_Analysis"
format: html
editor: visual
---

#Performing analysis of the Rituximab TPM values by performing Welch's t-test of high producers against low producers, suing volcano plots for visualization. Then used Clusterprofiler to perform over-representation enrichments of genes detected in the high producer cell lines or low producer cell lines. 

```{r}
library("tidyverse")
library("patchwork")
library(ggrepel)
```

Load the Rituximab RNA-seq dataset with TPM values

```{r}
rituximab <- read.csv("Rituximab_transformed_data.csv")
head(rituximab)
```

Filter out values that are less than 10.

```{r}
# Calculate the row sums
row_sums <- rowSums(rituximab == 0)

# Filter out values less than 10
rituximab_filtered <- rituximab[rowSums(rituximab < 10) == 0, ]

# Display the first few rows of the filtered dataset
head(rituximab_filtered)
```

```{r}
# Identify columns to filter out using grep
cols_to_remove <- grep("E7_R[1-3]|B5_R[1-3]", colnames(rituximab_filtered))

# Filter out the identified columns
rituximab_filtered <- rituximab_filtered[, -cols_to_remove]

# Display the first few rows of the filtered dataset
head(rituximab_filtered)

```

```{r}
dim(rituximab)
dim(rituximab_filtered)
```

#Write a csv file for the Rituximab filtered data.

```{r}
#write.csv(rituximab_filtered, file= "rituximab_filtered_data.csv")
```

#Check the variance with PCA of the filtered data

```{r}
## Again we have to take the transpose of our data 
pca <- prcomp(t(rituximab_filtered[,-1]))
 
## Simple un polished plot of pc1 and pc2
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2")
```

```{r}
summary(pca)
```
Use ggplot to plot the PCA variance.

```{r}
library(ggplot2)

df <- as.data.frame(pca$x)

# Our first basic plot
ggplot(df) + 
  aes(PC1, PC2, label = colnames(rituximab_filtered[,-1]), col =colnames(rituximab_filtered[,-1])) + 
  geom_point()+ 
  geom_text (nudge_x = 0.1, check_overlap = TRUE) +
  labs(x=paste0("PC1 (", pca.var.per[1], "%)"),
   y=paste0("PC2 (", pca.var.per[2], "%)"))

```

##Perform welch t-test based on the replicates data.

```{r}
head(rituximab_filtered)
```

```{r}
colnames(rituximab_filtered)
```

```{r}
# Extract the columns corresponding to high producer groups
high_producer_rep <- rituximab_filtered[,c(2:7,11:16,20:22)]


# Extract the columns corresponding to low producer groups
low_producer_rep <- rituximab_filtered[, c(8:10, 17:19,23:25)]


head(high_producer_rep)
head(low_producer_rep)
```

# PCA plot grouping the high and low producer together

```{r}

library(ggplot2)
library(ggrepel)  # For improved text label placement
library(ggforce) # For confidence ellipses

# Assuming pca.var.per contains the variance percentage explained by each PC
pca.var.per <- round(100 * pca$sdev^2 / sum(pca$sdev^2), 2)

# Convert PCA scores to a data frame
df <- as.data.frame(pca$x)

# Add a column for the sample names
df$Sample <- colnames(rituximab_filtered[,-1])

# Define a grouping variable for high and low producers
high_producers <- colnames(rituximab_filtered[,c(2:7,11:16,20:22)])
low_producers <- colnames(rituximab_filtered[, c(8:10, 17:19,23:25)])

df$Group <- ifelse(df$Sample %in% high_producers, "High Producer", "Low Producer")

# Basic plot with labels and colors by group
pca_plot <- ggplot(df, aes(x = PC1, y = PC2, label = Sample, color = Group)) + 
  geom_point(size = 4, alpha = 0.8) + 
  geom_text_repel(size = 3.5, box.padding = 0.2, point.padding = 0.3) +
  stat_ellipse(aes(group = Group), level = 0.95, linetype = 2) +
  labs(
    x = paste0("PC1 (", pca.var.per[1], "%)"),
    y = paste0("PC2 (", pca.var.per[2], "%)"),
    title = "PCA Plot of RNAseq 
    Rituximab-producing CHO Cells",
    color = "Production Level"
  ) +
  theme_minimal(base_size = 15) +
  theme(
    plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
    legend.position = "right",
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 10),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12)
  ) +
  scale_color_manual(values = c("High Producer" = "#1f78b4", "Low Producer" = "#33a02c"))

# Print the plot
print(pca_plot)

```

#Plot PCA3 and PCA4

```{r}
# Assuming pca.var.per contains the variance percentage explained by each PC
pca.var.per <- round(100 * pca$sdev^2 / sum(pca$sdev^2), 2)

# Convert PCA scores to a data frame
df <- as.data.frame(pca$x)

# Add a column for the sample names
df$Sample <- colnames(rituximab_filtered[,-1])

# Define a grouping variable for high and low producers
high_producers <- colnames(rituximab_filtered[, c(2:7, 11:19, 23:25)])
low_producers <- colnames(rituximab_filtered[, c(8:10, 20:22)])

df$Group <- ifelse(df$Sample %in% high_producers, "High Producer", "Low Producer")

# Basic plot with labels and colors by group
pca_plot <- ggplot(df, aes(x = PC3, y = PC4, label = Sample, color = Group)) + 
  geom_point(size = 4, alpha = 0.8) + 
  geom_text_repel(size = 3.5, box.padding = 0.2, point.padding = 0.3) +
  stat_ellipse(aes(group = Group), level = 0.95, linetype = 2) +
  labs(
    x = paste0("PC3 (", pca.var.per[3], "%)"),
    y = paste0("PC4 (", pca.var.per[4], "%)"),
    title = "PCA Plot of Rituximab-producing CHO Cells",
    color = "Production Level"
  ) +
  theme_minimal(base_size = 15) +
  theme(
    plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
    legend.position = "right",
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 10),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12)
  ) +
  scale_color_manual(values = c("High Producer" = "#1f78b4", "Low Producer" = "#33a02c"))

# Print the plot
print(pca_plot)

```

```{r}
# Perform Welch's t-test between high and low producer groups for each gene
welch_test_results_rep <- lapply(1:nrow(rituximab_filtered), function(i) {
  t.test(high_producer_rep[i, ], low_producer_rep[i, ], var.equal = FALSE, na.rm = TRUE)
})

# Extract p-values from the test results
p_values_rep <- sapply(welch_test_results_rep, function(result_rep) result_rep$p.value)

# Print the p-values
head(p_values_rep)
```

```{r}
# Create a new dataframe to store genes and p-values
gene_p_values_rep <- data.frame(Gene = rownames(rituximab_filtered), Gene_name= rituximab_filtered$symbol.sep, P_value = p_values_rep)

# Print the dataframe
print(gene_p_values_rep)
```

#p_adjusted values with bonferroni

```{r}
padj_rep <- p.adjust (gene_p_values_rep$P_value, method ="bonferroni")
head(padj_rep)

gene_padj_values_rep <-data.frame(Gene = rownames(rituximab_filtered), 
                                  Gene_name= rituximab_filtered$symbol.sep, 
                                  P_value = p_values_rep, padj = padj_rep)

gene_padj_values_rep
```

```{r}
# Order gene_padj_values_rep by padj values
gene_padj_values_rep_ordered <- gene_padj_values_rep[order(gene_padj_values_rep$padj), ]

# Print the ordered data frame
print(gene_padj_values_rep_ordered)
```

Log2 the data, calculate the mean for each gene per group. Then calculate the fold change between the groups (high producer vs low producer)

```{r}
high_log_transform <- log2(high_producer_rep)
low_log_transform <- log2(low_producer_rep)
head(high_log_transform)
head(low_log_transform)
```

```{r}
# Calculate the mean for each gene in high producer group 
high_producer_mean <- rowMeans(high_log_transform, na.rm = TRUE)

# Calculate the mean for each gene in low producer group 
low_producer_mean <- rowMeans(low_log_transform, na.rm = TRUE)

# Calculate the fold change (high producer mean - low producer mean)
log2_fold_change <- high_producer_mean - low_producer_mean

# Create a data frame with the results
results <- data.frame(Gene = rituximab_filtered$symbol.sep,
  low_producer_rep,
  high_producer_rep,
  High_Producer_Mean = high_producer_mean,
  Low_Producer_Mean = low_producer_mean,
  log2_Fold_Change = log2_fold_change, 
  P_value = p_values_rep, 
  padj = padj_rep
)

# Print the results
print(head(results))
dim(results)
```

```{r}
# Load required packages
library(ggplot2)
library(ggrepel)
library(dplyr)

# Set significance thresholds
significance_threshold <- 0.05
fold_change_threshold <- 0  # Adjust this based on study criteria

# Add a column to indicate significant genes based on thresholds using adjusted p-values
results$Significant <- with(results, ifelse(P_value < significance_threshold & abs(log2_Fold_Change) > fold_change_threshold, "Significant", "Not Significant"))

# Select the top 10 genes based on absolute fold change and  p-value
top_genes <- results %>%
  filter(padj < significance_threshold) %>%  # Keep only significant genes
  arrange(desc(abs(log2_Fold_Change)), P_value) %>%  # Sort by highest fold change, then lowest pval
  slice_head(n = 7)  # Select top 10 genes

# Create the volcano plot using adjusted p-values
ggplot(results, aes(x = log2_Fold_Change, y = -log10(P_value))) +
  geom_point(aes(color = Significant), alpha = 0.6, size = 2) +
  scale_color_manual(values = c("Not Significant" = "grey")) +
  labs(title = "RNAseq: High Producer vs Low Producer of Rituximab", 
       x = "Log2 Fold Change", 
       y = "-Log10 P-Value") +
  theme_minimal() +
  theme(legend.title = element_blank()) +
 geom_text_repel(data = top_genes, aes(label = Gene), color = "blue", size = 3, max.overlaps = 10)+  # Label top genes in blue
  geom_point(data = results %>% filter(Significant == "Significant" & log2_Fold_Change > 0), color = "red", size = 2) +  # Upregulated in red
  geom_point(data = results %>% filter(Significant == "Significant" & log2_Fold_Change < 0), color = "blue", size = 2)  # Downregulated in blue 

```

#filter for fold change that are less than 0 and filter for fold change greater than 0, both with pval \<0.05.

```{r}
results_0.05_negFC <- subset(results, log2_Fold_Change < 0 & P_value < 0.05)
results_0.05_posFC <- subset(results, log2_Fold_Change >0 & P_value < 0.05)
results_0.05_negFC
results_0.05_posFC
dim(results_0.05_negFC)
dim(results_0.05_posFC)
```

```{r}
results_0.05_negFC_ordered <- results_0.05_negFC[order(results_0.05_negFC$log2_Fold_Change, decreasing =TRUE), ]
results_0.05_posFC_ordered <- results_0.05_posFC[order(results_0.05_posFC$log2_Fold_Change, decreasing = TRUE), ]
results_0.05_negFC_ordered
results_0.05_posFC_ordered
```

```{r}
#write.csv(results_0.05_posFC_ordered, file="Rituximab_0.05_Positivefoldchange_04252025.csv")
```

```{r}
#write.csv(results_0.05_negFC_ordered, file="Rituximab_0.05_Negativefoldchange_02112025.csv")
```

```{r}
library("clusterProfiler")
library("org.Hs.eg.db")
```



```{r}
gene_list_posFC <- results_0.05_posFC_ordered$Gene
gene_list_posFC <- toupper(gene_list_posFC)
head(gene_list_posFC)
```
#Perform GO on the negative fold change genes
```{r}
ego_posFC <- enrichGO(gene = gene_list_posFC, 
                OrgDb = org.Hs.eg.db, 
                keyType = "SYMBOL",
                ont = "BP",  # Choose "BP" for Biological Process, "MF" for Molecular Function, or "CC" for Cellular Component
                pAdjustMethod = "BH",
                pvalueCutoff = 0.05,
                qvalueCutoff = 0.2)

```

```{r}
ego_posFC
```

```{r}
ego_posFC_df <- as.data.frame(ego_posFC)
ego_posFC_df
```

```{r}
#write.csv(ego_posFC_df, "ego_highproducer.csv")
```

```{r}
dotplot(ego_posFC)
```

#graph the enrichment on the selected enrichment terms for the high producers

```{r}
selected_go_high <- read.csv("selected_ego_highproducer.csv")
colnames(selected_go_high)
```


```{r}
library(ggplot2)
library(scales)

# Data preparation
selected_go_high$GeneRatio <- sapply(selected_go_high$GeneRatio, function(x) eval(parse(text = x)))
selected_go_high$log_padj <- -log10(selected_go_high$p.adjust)

# Create the plot with original color scheme
ggplot(selected_go_high, 
       aes(x = GeneRatio, 
           y = reorder(Description, GeneRatio), 
           size = Count, 
           color = log_padj)) +
  
  geom_point(alpha = 0.9) +
  
  # Original blue color gradient
  scale_color_gradient(
    low = "lightblue", 
    high = "darkblue",
    name = expression(-log[10]~"(adj. P-value)"),
    guide = guide_colorbar(
      frame.colour = "black",
      ticks.colour = "black",
      barwidth = 1,
      barheight = 10
    )
  ) +
  
  # Size scaling
  scale_size_continuous(
    name = "Gene Count",
    range = c(4, 12),
    breaks = pretty_breaks(n = 5)
  ) +
  
  # Labels and titles
  labs(
    title = "GO Term Enrichment in High-Producer
    Rituximab Cell Lines",
    subtitle = "RNA-seq Analysis",
    x = "Gene Ratio (Gene Count / Background)",
    y = NULL,
    caption = "Data source: RNA-seq of high vs. low producer cell lines"
  ) +
  
  # Theme customization
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(hjust = 0.5, size = 18, face = "bold", margin = margin(b = 10)),
    plot.subtitle = element_text(hjust = 0.5, size = 14, color = "gray40", margin = margin(b = 20)),
    plot.caption = element_text(size = 10, color = "gray50", hjust = 1),
    axis.text.y = element_text(size = 12, color = "black"),
    axis.text.x = element_text(angle = 45, hjust = 1, size = 12, color = "black"),
    axis.title.x = element_text(size = 14, face = "bold", margin = margin(t = 10)),
    panel.grid.major.y = element_line(color = "gray90", linewidth = 0.3),
    panel.grid.minor = element_blank(),
    legend.position = "right",
    legend.title = element_text(size = 12, face = "bold"),
    legend.text = element_text(size = 11),
    legend.spacing.y = unit(0.5, "cm"),
    plot.margin = margin(1, 1, 1, 1, "cm")
  ) +
  
  # Additional refinements
  scale_x_continuous(expand = expansion(mult = c(0.02, 0.05))) +
  guides(
    size = guide_legend(override.aes = list(color = "darkblue")),
    color = guide_colorbar(ticks = TRUE)
  )
```
```{r}
#ggsave("GO_Enrichment_HighProducers.tiff", 
       #width = 10, height = 8, dpi = 300, 
       #compression = "lzw")
```

#graph the enrichment on the selected enrichment terms for the low producers

```{r}

# Convert gene_id column to uppercase
results_0.05_negFC_ordered$Gene <- toupper(results_0.05_negFC_ordered$Gene)

```

```{r}
go_enrichment_results_0.05_negFC_ordered <- enrichGO(gene = results_0.05_negFC_ordered$Gene, 
                             OrgDb = org.Hs.eg.db, 
                             keyType = "SYMBOL", 
                             ont = "BP", 
                             pAdjustMethod = "BH",
                            pvalueCutoff = 0.05,
                            qvalueCutoff = 0.2
                            ) 


barplot(go_enrichment_results_0.05_negFC_ordered)
```

#selected GO enriched genes in low producers. Read file. 
```{r}
selected_go_enrichment_negFC <- read.csv("Rituximab_selected_goenrichment_upregulated_in_low_producers_02122025.csv")
```


```{r}
# Load necessary libraries
library(ggplot2)
library(scales)

# Convert fractions in GeneRatio to numeric
selected_go_enrichment_negFC$GeneRatio <- sapply(selected_go_enrichment_negFC$GeneRatio, function(x) eval(parse(text = x)))

# Calculate -log10 adjusted p-values for significance coloring
selected_go_enrichment_negFC$log_padj <- -log10(selected_go_enrichment_negFC$p.adjust)

# Create  dot plot
ggplot(selected_go_enrichment_negFC, 
       aes(x = GeneRatio, 
           y = reorder(Description, GeneRatio), 
           size = Count,        # Size based on gene count
           color = log_padj)) + # Color based on significance
  
  geom_point(alpha = 0.9) +
  
  # Color gradient for significance with clear legend styling
  scale_color_gradient(
    low = "lightblue",
    high = "darkblue",
    name = expression(-log[10]~"(adj. P-value)"),
    guide = guide_colorbar(
      frame.colour = "black",
      ticks.colour = "black",
      barwidth = 1.2,
      barheight = 12
    )
  ) +
  
  # Size scale for gene count with defined breaks and legend style
  scale_size_continuous(
    name = "Gene Count",
    range = c(4, 12),
    breaks = pretty_breaks(n = 5)
  ) +
  
  # Titles and labels
  labs(
    title = "GO Term Enrichment in Low-Producer Rituximab Cell Lines",
    subtitle = "RNA-seq Analysis",
    x = "Gene Ratio (Gene Count / Background)",
    y = NULL,
    caption = "Data source: RNA-seq of high vs. low producer cell lines"
  ) +
  
  # Minimal theme with improved text formatting and spacing
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(hjust = 0.5, size = 18, face = "bold", margin = margin(b = 12)),
    plot.subtitle = element_text(hjust = 0.5, size = 14, color = "gray40", margin = margin(b = 20)),
    plot.caption = element_text(size = 10, color = "gray50", hjust = 1, margin = margin(t = 10)),
    axis.text.y = element_text(size = 12, color = "black"),
    axis.text.x = element_text(angle = 45, hjust = 1, size = 12, color = "black"),
    axis.title.x = element_text(size = 14, face = "bold", margin = margin(t = 10)),
    panel.grid.major.y = element_line(color = "gray90", linewidth = 0.3),
    panel.grid.minor = element_blank(),
    legend.position = "right",
    legend.title = element_text(size = 12, face = "bold"),
    legend.text = element_text(size = 11),
    legend.spacing.y = unit(0.5, "cm"),
    plot.margin = margin(1, 1, 1, 1, "cm")
  ) +
  
  # Slight padding on x-axis for better spacing
  scale_x_continuous(expand = expansion(mult = c(0.02, 0.05))) +
  
  # Legends: color and size with custom override for size legend points color
  guides(
    size = guide_legend(override.aes = list(color = "darkblue")),  # dark blue points for gene count legend
    color = guide_colorbar(ticks = TRUE)
  )

#ggsave("GO_Enrichment_LowProducers.tiff",
       #width = 10, height = 8, dpi = 300,
       #compression = "lzw")


```